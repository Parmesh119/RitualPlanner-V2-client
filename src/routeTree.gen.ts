/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LegalPrivacyRouteImport } from './routes/legal/privacy'
import { Route as LegalToSRouteImport } from './routes/legal/ToS'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AuthForgotPasswordRouteImport } from './routes/auth/forgot-password'
import { Route as AppDashboardIndexRouteImport } from './routes/app/dashboard/index'
import { Route as AppOnboardIdRouteImport } from './routes/app/onboard/$id'

const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LegalPrivacyRoute = LegalPrivacyRouteImport.update({
  id: '/legal/privacy',
  path: '/legal/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const LegalToSRoute = LegalToSRouteImport.update({
  id: '/legal/ToS',
  path: '/legal/ToS',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthForgotPasswordRoute = AuthForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AppDashboardIndexRoute = AppDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppOnboardIdRoute = AppOnboardIdRouteImport.update({
  id: '/onboard/$id',
  path: '/onboard/$id',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/legal/ToS': typeof LegalToSRoute
  '/legal/privacy': typeof LegalPrivacyRoute
  '/app/onboard/$id': typeof AppOnboardIdRoute
  '/app/dashboard': typeof AppDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/legal/ToS': typeof LegalToSRoute
  '/legal/privacy': typeof LegalPrivacyRoute
  '/app/onboard/$id': typeof AppOnboardIdRoute
  '/app/dashboard': typeof AppDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/legal/ToS': typeof LegalToSRoute
  '/legal/privacy': typeof LegalPrivacyRoute
  '/app/onboard/$id': typeof AppOnboardIdRoute
  '/app/dashboard/': typeof AppDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/auth'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/legal/ToS'
    | '/legal/privacy'
    | '/app/onboard/$id'
    | '/app/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/auth'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/legal/ToS'
    | '/legal/privacy'
    | '/app/onboard/$id'
    | '/app/dashboard'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/auth'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/legal/ToS'
    | '/legal/privacy'
    | '/app/onboard/$id'
    | '/app/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  LegalToSRoute: typeof LegalToSRoute
  LegalPrivacyRoute: typeof LegalPrivacyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/legal/privacy': {
      id: '/legal/privacy'
      path: '/legal/privacy'
      fullPath: '/legal/privacy'
      preLoaderRoute: typeof LegalPrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/legal/ToS': {
      id: '/legal/ToS'
      path: '/legal/ToS'
      fullPath: '/legal/ToS'
      preLoaderRoute: typeof LegalToSRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/app/dashboard/': {
      id: '/app/dashboard/'
      path: '/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppDashboardIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/onboard/$id': {
      id: '/app/onboard/$id'
      path: '/onboard/$id'
      fullPath: '/app/onboard/$id'
      preLoaderRoute: typeof AppOnboardIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppOnboardIdRoute: typeof AppOnboardIdRoute
  AppDashboardIndexRoute: typeof AppDashboardIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppOnboardIdRoute: AppOnboardIdRoute,
  AppDashboardIndexRoute: AppDashboardIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  LegalToSRoute: LegalToSRoute,
  LegalPrivacyRoute: LegalPrivacyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
